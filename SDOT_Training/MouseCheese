Mooshak the mouse has been placed in a maze.There is a huge chunk of cheese somewhere in the maze.
The maze is represented as a two-dimensional array of integers, where o represents walls, 1 represents paths where Mooshak can move, and 9 represents the huge chunk of cheese.Mooshak starts in the top-left corner at 0,0.
Write a method isPath of class Maze Path to determine if Mooshak can reach the huge chunk of cheese. The input to isPath consists of a two dimensional array grid for the maze matrix.
The method should return 1 if there is a path from Mooshak to the cheese, and 0 if not.
Mooshak is not allowed to leave the maze or climb on walls/
Example 8x8 maze where Mooshak can get the cheese.

1 0 1 1 1 0 0 1
1 0 0 0 1 1 1 1
1 0 0 0 0 0 0 0
1 0 1 0 9 0 1 1
1 1 1 0 1 0 0 1
1 0 1 0 1 1 0 1
1 0 0 0 0 1 0 1
1 1 1 1 1 1 1 1

import java.io.*;
class Main{
	public static boolean hasPath(int[][]maze){
		if(helper(maze,0,0))
			return true;
		return false;
	}
	private static boolean helper(int [][]maze, int i, int j){
		if(i<0 || j<0 || i>=maze.length || j>=maze.length || maze[i][j]==0)
			return false;
		if(maze[i][j]==9)
			return true;
		maze[i][j]=0;
		boolean op1,op2,op3,op4;
		op1 = helper(maze,i+1,j);
		op2 = helper(maze,i,j+1);
		op3 = helper(maze,i-1,j);
		op4 = helper(maze,i,j-1);
        maze[i][j] = 1;
		return (op1|| op2 || op3 || op4);
	}

	public static void main(String[] args)
	{
		//int n;
		int[][] maze = {{1, 0, 1, 1, 1, 0, 0, 1},
				{1, 0, 0, 0, 1, 1, 1, 1},
				{1, 0, 0, 0, 0, 0, 0, 0},
				{1, 0, 1, 0, 9, 0, 1, 1},
				{1, 1, 1, 0, 1, 0, 0, 1},
				{1, 0, 1, 0, 1, 1, 0, 1},
				{1, 0, 0, 0, 0, 1, 0, 1},
				{1, 1, 1, 1, 1, 1, 1, 1}};
		if(hasPath(maze)){
		    System.out.println("mouse found the cheeze");
		}
		else{
		    System.out.println("no");
		}
		
	}
}

